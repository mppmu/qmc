# get path to the top level directory
QMC_ROOT = $(abspath $(dir $(abspath $(lastword $(MAKEFILE_LIST))))/../..)
TEST_FRAMEWORK_DIR = $(dir $(abspath $(lastword $(MAKEFILE_LIST))))
QMC_HEADERS_DIR = $(abspath $(TEST_FRAMEWORK_DIR)/../../src)

CXX ?= g++
CC = $(CXX)

GCOV ?= gcov
GCOVFLAGS = -lp
GCOVR ?= gcovr
GCOVRFLAGS = -r $(QMC_ROOT) --html --html-details -g -k -f $(QMC_HEADERS_DIR)

CPPCHECKFLAGS = --std=c++17 --language=c++ --xml --xml-version=2 --inconclusive --force --enable=all --suppress=missingIncludeSystem 

ifeq ($(CXX), g++)
.DEFAULT_GOAL = coverage
else
.DEFAULT_GOAL = test
endif

ifeq ($(CXX), nvcc)
# cancel compile and build in one go (breaks with nvcc)
% : %.cpp
endif

ifeq ($(MAKELEVEL),0)

ifeq ($(CXX), nvcc)
CXXFLAGS += -std=c++17 -g -G -O0 -x cu -I$(QMC_HEADERS_DIR) -I$(TEST_FRAMEWORK_DIR)
else
CXXFLAGS += -std=c++17 -g -O0 --coverage -fprofile-arcs -ftest-coverage -fno-inline -fno-inline-small-functions -fno-default-inline -I$(QMC_HEADERS_DIR) -I$(TEST_FRAMEWORK_DIR)
LDFLAGS += -pthread -fprofile-arcs -ftest-coverage
endif
LDLIBS += $(TEST_FRAMEWORK_DIR)/catch.o -lgsl -lgslcblas -lm

export CXXFLAGS LDFLAGS LDLIBS

endif
